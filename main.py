import os
import asyncio
import edge_tts
import fitz
from docx import Document
from pydub import AudioSegment
from pathlib import Path
from tkinter import Tk, filedialog
from tqdm.asyncio import tqdm_asyncio
import shutil

# ===== C·∫§U H√åNH =====
CHUNK_WORDS = 500
MAX_CONCURRENCY = 128
MAX_RETRIES = 3
BYTE_PER_WORD = 1280
VOICE = "vi-VN-NamMinhNeural"

DOWNLOADS = str(Path.home() / "Downloads")

# ===== ƒê·ªçc file =====
def read_pdf(path):
    text = ""
    with fitz.open(path) as doc:
        for page in doc:
            text += page.get_text()
    return text.strip()

def read_docx(path):
    doc = Document(path)
    return " ".join(p.text.strip() for p in doc.paragraphs if p.text.strip())

# ===== Chia vƒÉn b·∫£n =====
def split_text(text, chunk_words=CHUNK_WORDS):
    words = text.split()
    return [" ".join(words[i:i+chunk_words]) for i in range(0, len(words), chunk_words)]

# ===== L∆∞u t·∫°m ƒëo·∫°n vƒÉn b·∫£n =====
def save_chunks(chunks, folder):
    os.makedirs(folder, exist_ok=True)
    for i, chunk in enumerate(chunks):
        with open(os.path.join(folder, f"text_{i:03}.txt"), "w", encoding="utf-8") as f:
            f.write(chunk)

def load_chunks(folder):
    chunks = []
    i = 0
    while True:
        path = os.path.join(folder, f"text_{i:03}.txt")
        if not os.path.exists(path):
            break
        with open(path, "r", encoding="utf-8") as f:
            chunks.append(f.read())
        i += 1
    return chunks

# ===== Ki·ªÉm tra file √¢m thanh =====
def is_valid(path, text):
    if not os.path.exists(path): return False
    size = os.path.getsize(path)
    expected = len(text.split()) * BYTE_PER_WORD
    return size >= expected

# ===== Chuy·ªÉn ƒëo·∫°n sang mp3 =====
async def convert_chunk(index, text, folder):
    path = os.path.join(folder, f"part_{index:03}.mp3")
    try:
        communicate = edge_tts.Communicate(text, voice=VOICE)
        await communicate.save(path)
    except Exception as e:
        print(f"L·ªói ƒëo·∫°n {index}: {e}")

# ===== Gh√©p file mp3 =====
def combine_files(mp3_files, output_path):
    combined = AudioSegment.empty()
    for file in mp3_files:
        if os.path.exists(file):
            combined += AudioSegment.from_mp3(file)
    combined.export(output_path, format="mp3")

# ===== H·ªôp ch·ªçn file =====
def choose_file():
    root = Tk()
    root.withdraw()
    return filedialog.askopenfilename(filetypes=[("Document", "*.pdf *.docx")])

# ===== G·ª≠i c√°c ƒëo·∫°n song song =====
async def process_chunks_async(chunks, folder, batch_indices):
    sem = asyncio.Semaphore(MAX_CONCURRENCY)

    async def process_one(i):
        async with sem:
            await convert_chunk(i, chunks[i], folder)

    await tqdm_asyncio.gather(*(process_one(i) for i in batch_indices), total=len(batch_indices))

# ===== Main =====
async def main():
    path = choose_file()
    if not path:
        print("Kh√¥ng ch·ªçn file.")
        return

    base = Path(path).stem
    temp_dir = os.path.join(DOWNLOADS, f"{base}_temp")
    final_mp3 = os.path.join(DOWNLOADS, f"{base}.mp3")

    # ƒê·ªçc vƒÉn b·∫£n
    print("ƒêang ƒë·ªçc file...")
    if path.endswith(".pdf"):
        text = read_pdf(path)
    elif path.endswith(".docx"):
        text = read_docx(path)
    else:
        print("Ch·ªâ h·ªó tr·ª£ PDF/DOCX.")
        return

    # T√°ch ƒëo·∫°n
    chunks = split_text(text)
    print(f"Chia th√†nh {len(chunks)} ƒëo·∫°n.")
    save_chunks(chunks, temp_dir)

    # G·ª≠i l·∫ßn ƒë·∫ßu
    await process_chunks_async(chunks, temp_dir, list(range(len(chunks))))

    # G·ª≠i l·∫°i c√°c ƒëo·∫°n l·ªói t·ª± ƒë·ªông
    for attempt in range(1, MAX_RETRIES + 1):
        errors = [i for i, c in enumerate(chunks) if not is_valid(os.path.join(temp_dir, f"part_{i:03}.mp3"), c)]
        if not errors:
            break
        print(f"‚ùå L·∫ßn th·ª≠ {attempt}: c√≤n {len(errors)} ƒëo·∫°n l·ªói. G·ª≠i l·∫°i...")
        await process_chunks_async(chunks, temp_dir, errors)

    # Ki·ªÉm tra l·∫ßn cu·ªëi
    final_errors = [i for i, c in enumerate(chunks) if not is_valid(os.path.join(temp_dir, f"part_{i:03}.mp3"), c)]
    if final_errors:
        print(f"\n‚ÄºÔ∏è Sau {MAX_RETRIES} l·∫ßn th·ª≠ v·∫´n c√≤n l·ªói ·ªü c√°c ƒëo·∫°n: {final_errors}")
        retry_input = input("B·∫°n c√≥ mu·ªën nh·∫≠p c√°c ƒëo·∫°n t√πy √Ω ƒë·ªÉ g·ª≠i l·∫°i kh√¥ng? (vd: 0,5,7) (Enter ƒë·ªÉ b·ªè qua): ").strip()
        if retry_input:
            try:
                manual_indices = [int(i.strip()) for i in retry_input.split(",") if i.strip().isdigit()]
                await process_chunks_async(chunks, temp_dir, manual_indices)
            except Exception as e:
                print(f"L·ªói khi nh·∫≠p: {e}")

    # Lu√¥n gh√©p t·∫•t c·∫£ file
    print("üéß ƒêang gh√©p file...")
    mp3_files = [os.path.join(temp_dir, f"part_{i:03}.mp3") for i in range(len(chunks))]
    combine_files(mp3_files, final_mp3)

    # Xo√° th∆∞ m·ª•c t·∫°m
    shutil.rmtree(temp_dir)
    print(f"\n‚úÖ Ho√†n t·∫•t! File l∆∞u t·∫°i: {final_mp3}")

# ===== Ch·∫°y =====
if __name__ == "__main__":
    asyncio.run(main())
