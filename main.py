import asyncio
import os
import shutil
from pathlib import Path
from tkinter import Tk, filedialog

from config import *
from read import read_pdf, read_docx, split_text, save_chunks
from send import process_chunks_async
from checkerrorfile import find_invalid_files
from finalmp3 import combine_files


def choose_file():
    root = Tk()
    root.withdraw()
    return filedialog.askopenfilename(filetypes=[("Document", "*.pdf *.docx")])


async def main():
    path = choose_file()
    if not path:
        print("Kh√¥ng ch·ªçn file.")
        return

    base = Path(path).stem
    temp_dir = os.path.join(DOWNLOADS, f"{base}_temp")
    final_mp3 = os.path.join(DOWNLOADS, f"{base}.mp3")

    print("ƒêang ƒë·ªçc file...")
    if path.endswith(".pdf"):
        text = read_pdf(path)
    elif path.endswith(".docx"):
        text = read_docx(path)
    else:
        print("Ch·ªâ h·ªó tr·ª£ PDF/DOCX.")
        return

    chunks = split_text(text, CHUNK_WORDS)
    print(f"Chia th√†nh {len(chunks)} ƒëo·∫°n.")
    save_chunks(chunks, temp_dir)

    await process_chunks_async(chunks, temp_dir, list(range(len(chunks))), MAX_CONCURRENCY, VOICE)

    for attempt in range(1, MAX_RETRIES + 1):
        errors = find_invalid_files(chunks, temp_dir, BYTE_PER_WORD)
        if not errors:
            break
        print(f"‚ùå L·∫ßn th·ª≠ {attempt}: c√≤n {len(errors)} ƒëo·∫°n l·ªói. G·ª≠i l·∫°i...")
        await process_chunks_async(chunks, temp_dir, errors, MAX_CONCURRENCY, VOICE)

    final_errors = find_invalid_files(chunks, temp_dir, BYTE_PER_WORD)
    if final_errors:
        print(f"\n‚ÄºÔ∏è Sau {MAX_RETRIES} l·∫ßn th·ª≠ v·∫´n c√≤n l·ªói ·ªü c√°c ƒëo·∫°n: {final_errors}")
        retry_input = input("B·∫°n c√≥ mu·ªën nh·∫≠p c√°c ƒëo·∫°n t√πy √Ω ƒë·ªÉ g·ª≠i l·∫°i kh√¥ng? (vd: 0,5,7) (Enter ƒë·ªÉ b·ªè qua): ").strip()
        if retry_input:
            try:
                manual_indices = [int(i.strip()) for i in retry_input.split(",") if i.strip().isdigit()]
                await process_chunks_async(chunks, temp_dir, manual_indices, MAX_CONCURRENCY, VOICE)
            except Exception as e:
                print(f"L·ªói khi nh·∫≠p: {e}")

    print("üéß ƒêang gh√©p file...")
    mp3_files = [os.path.join(temp_dir, f"part_{i:03}.mp3") for i in range(len(chunks))]
    combine_files(mp3_files, final_mp3)

    shutil.rmtree(temp_dir)
    print(f"\n‚úÖ Ho√†n t·∫•t! File l∆∞u t·∫°i: {final_mp3}")


if __name__ == "__main__":
    asyncio.run(main())
